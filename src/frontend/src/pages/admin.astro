---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Mission Planner - Admin Console" activePage="admin">
  <div class="space-y-8">
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
      <h1 class="text-3xl font-bold text-astro-dark mb-4">Admin Console</h1>
      <p class="text-astro-gray mb-6">
        Administrative tools and system management for Mission Planner.
      </p>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- System Status -->
        <div class="space-y-6">
          <div class="flex items-center justify-between">
            <h2 class="text-xl font-semibold text-astro-dark">System Status</h2>
            <button id="refreshStatus" class="px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm rounded transition-colors">
              Refresh
            </button>
          </div>
          <div class="space-y-4">
            <!-- API Health Status -->
            <div id="apiStatus" class="flex items-center justify-between p-4 bg-gray-50 border border-gray-300 rounded-lg">
              <div class="flex items-center">
                <div id="apiIndicator" class="w-3 h-3 bg-gray-500 rounded-full mr-3"></div>
                <span class="font-medium text-gray-900">API Service</span>
              </div>
              <span id="apiStatusText" class="text-sm text-gray-700">Checking...</span>
            </div>
            
            <!-- Database Status -->
            <div id="dbStatus" class="flex items-center justify-between p-4 bg-gray-50 border border-gray-300 rounded-lg">
              <div class="flex items-center">
                <div id="dbIndicator" class="w-3 h-3 bg-gray-500 rounded-full mr-3"></div>
                <span class="font-medium text-gray-900">Database</span>
              </div>
              <span id="dbStatusText" class="text-sm text-gray-700">Checking...</span>
            </div>
            
            <!-- Satellites Status -->
            <div id="satellitesStatus" class="flex items-center justify-between p-4 bg-gray-50 border border-gray-300 rounded-lg">
              <div class="flex items-center">
                <div id="satellitesIndicator" class="w-3 h-3 bg-gray-500 rounded-full mr-3"></div>
                <span class="font-medium text-gray-900">Satellite Data</span>
              </div>
              <span id="satellitesStatusText" class="text-sm text-gray-700">Checking...</span>
            </div>
            
            <!-- Location Services Status -->
            <div id="locationStatus" class="flex items-center justify-between p-4 bg-gray-50 border border-gray-300 rounded-lg">
              <div class="flex items-center">
                <div id="locationIndicator" class="w-3 h-3 bg-gray-500 rounded-full mr-3"></div>
                <span class="font-medium text-gray-900">Location Services</span>
              </div>
              <span id="locationStatusText" class="text-sm text-gray-700">Checking...</span>
            </div>
          </div>
          
          <!-- Overall Status Summary -->
          <div id="overallStatus" class="p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <div class="flex items-center justify-between">
              <span class="font-medium text-blue-900">Overall System Health</span>
              <span id="overallStatusText" class="text-sm text-blue-700">Checking...</span>
            </div>
            <div id="lastChecked" class="text-xs text-blue-600 mt-1"></div>
          </div>
        </div>

        <!-- User Management -->
        <div class="space-y-6">
          <h2 class="text-xl font-semibold text-astro-dark">User Management</h2>
          <div class="space-y-4">
            <div class="p-4 bg-gray-50 rounded-lg">
              <h3 class="font-medium text-astro-dark mb-2">Total Users</h3>
              <p id="totalUsers" class="text-2xl font-bold text-astro-blue">-</p>
            </div>
            <div class="p-4 bg-gray-50 rounded-lg">
              <h3 class="font-medium text-astro-dark mb-2">Admin Users</h3>
              <p id="adminUsers" class="text-2xl font-bold text-astro-blue">-</p>
            </div>
            <button id="createUserBtn" class="w-full bg-astro-blue hover:bg-astro-light hover:text-astro-dark px-4 py-2 rounded-lg text-white font-medium transition-colors duration-200">
              Create New User
            </button>
          </div>
        </div>
      </div>

      <!-- Admin Tools -->
      <div class="mt-8 pt-8 border-t border-gray-200">
        <h2 class="text-xl font-semibold text-astro-dark mb-6">Administrative Tools</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button class="p-4 bg-blue-50 hover:bg-blue-100 border border-blue-200 rounded-lg text-left transition-colors">
            <h3 class="font-semibold text-blue-900 mb-2">System Logs</h3>
            <p class="text-sm text-blue-700">View system activity and error logs</p>
          </button>
          <button class="p-4 bg-purple-50 hover:bg-purple-100 border border-purple-200 rounded-lg text-left transition-colors">
            <h3 class="font-semibold text-purple-900 mb-2">Configuration</h3>
            <p class="text-sm text-purple-700">Manage system configuration settings</p>
          </button>
          <button class="p-4 bg-orange-50 hover:bg-orange-100 border border-orange-200 rounded-lg text-left transition-colors">
            <h3 class="font-semibold text-orange-900 mb-2">Backup & Restore</h3>
            <p class="text-sm text-orange-700">Database backup and restore operations</p>
          </button>
        </div>
      </div>

      <!-- Recent Admin Activity -->
      <div class="mt-8 pt-8 border-t border-gray-200">
        <h2 class="text-xl font-semibold text-astro-dark mb-4">Recent Activity</h2>
        <div class="space-y-3">
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div>
              <p class="font-medium text-astro-dark">System backup completed</p>
              <p class="text-sm text-astro-gray">Automated daily backup successful</p>
            </div>
            <span class="text-sm text-astro-gray">2 hours ago</span>
          </div>
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div>
              <p class="font-medium text-astro-dark">User account created</p>
              <p class="text-sm text-astro-gray">New mission specialist account added</p>
            </div>
            <span class="text-sm text-astro-gray">1 day ago</span>
          </div>
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div>
              <p class="font-medium text-astro-dark">Configuration updated</p>
              <p class="text-sm text-astro-gray">Satellite communication settings modified</p>
            </div>
            <span class="text-sm text-astro-gray">3 days ago</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- User Creation Modal -->
  <div id="userModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-bold text-gray-900">Create New User</h3>
          <button id="closeModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <form id="createUserForm" class="space-y-4">
          <div id="userModalError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert">
          </div>
          
          <div id="userModalSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert">
          </div>
          
          <div>
            <label for="newUsername" class="block text-sm font-medium text-gray-700">Username</label>
            <input 
              id="newUsername" 
              name="username" 
              type="text" 
              required 
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="Enter username"
            />
          </div>
          
          <div>
            <label for="newEmail" class="block text-sm font-medium text-gray-700">Email</label>
            <input 
              id="newEmail" 
              name="email" 
              type="email" 
              required 
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="Enter email address"
            />
          </div>
          
          <div>
            <label for="newPassword" class="block text-sm font-medium text-gray-700">Password</label>
            <input 
              id="newPassword" 
              name="password" 
              type="password" 
              required 
              minlength="8"
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="Enter password (min 8 characters)"
            />
          </div>
          
          <div>
            <label for="userRole" class="block text-sm font-medium text-gray-700">Role</label>
            <select 
              id="userRole" 
              name="role" 
              required
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            >
              <option value="user">User</option>
              <option value="admin">Administrator</option>
            </select>
          </div>
          
          <div class="flex justify-end space-x-3 pt-4">
            <button 
              type="button" 
              id="cancelCreate"
              class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              id="submitCreateUser"
              class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Create User
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    const API_BASE = 'http://localhost:3000';

    // Status checking functions
    async function checkAPIHealth() {
      try {
        const response = await fetch(`${API_BASE}/health`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          const data = await response.json();
          updateStatusIndicator('api', 'operational', `Online (${data.timestamp.split('T')[1].split('.')[0]})`);
          return true;
        } else {
          updateStatusIndicator('api', 'error', `HTTP ${response.status}`);
          return false;
        }
      } catch (error) {
        updateStatusIndicator('api', 'error', 'Connection failed');
        return false;
      }
    }

    async function checkDatabaseHealth() {
      try {
        const response = await fetch(`${API_BASE}/db-test`, {
          method: 'GET',
          headers: window.getAuthHeaders ? window.getAuthHeaders() : { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          const data = await response.json();
          updateStatusIndicator('db', 'operational', 'Connected');
          return true;
        } else {
          const error = await response.json();
          updateStatusIndicator('db', 'error', error.error || 'Connection failed');
          return false;
        }
      } catch (error) {
        updateStatusIndicator('db', 'error', 'Connection failed');
        return false;
      }
    }

    async function checkSatelliteData() {
      try {
        const response = await fetch(`${API_BASE}/api/satellites`, {
          method: 'GET',
          headers: window.getAuthHeaders ? window.getAuthHeaders() : { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          const data = await response.json();
          updateStatusIndicator('satellites', 'operational', `${data.length} satellites tracked`);
          return true;
        } else {
          updateStatusIndicator('satellites', 'warning', 'Data access limited');
          return false;
        }
      } catch (error) {
        updateStatusIndicator('satellites', 'error', 'Service unavailable');
        return false;
      }
    }

    async function checkLocationServices() {
      try {
        const response = await fetch(`${API_BASE}/api/locations/all`, {
          method: 'GET',
          headers: window.getAuthHeaders ? window.getAuthHeaders() : { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          const data = await response.json();
          const satCount = data.satellites ? data.satellites.length : 0;
          const gsCount = data.ground_stations ? data.ground_stations.length : 0;
          updateStatusIndicator('location', 'operational', `${satCount} sats, ${gsCount} ground stations`);
          return true;
        } else {
          updateStatusIndicator('location', 'warning', 'Limited functionality');
          return false;
        }
      } catch (error) {
        updateStatusIndicator('location', 'error', 'Service unavailable');
        return false;
      }
    }

    function updateStatusIndicator(service, status, message) {
      const indicator = document.getElementById(`${service}Indicator`);
      const statusText = document.getElementById(`${service}StatusText`);
      const statusContainer = document.getElementById(`${service}Status`);
      
      // Reset classes
      statusContainer.className = 'flex items-center justify-between p-4 rounded-lg';
      indicator.className = 'w-3 h-3 rounded-full mr-3';
      
      switch (status) {
        case 'operational':
          statusContainer.classList.add('bg-green-50', 'border', 'border-green-200');
          indicator.classList.add('bg-green-500');
          statusText.className = 'text-sm text-green-700';
          break;
        case 'warning':
          statusContainer.classList.add('bg-yellow-50', 'border', 'border-yellow-200');
          indicator.classList.add('bg-yellow-500');
          statusText.className = 'text-sm text-yellow-700';
          break;
        case 'error':
          statusContainer.classList.add('bg-red-50', 'border', 'border-red-200');
          indicator.classList.add('bg-red-500');
          statusText.className = 'text-sm text-red-700';
          break;
        default:
          statusContainer.classList.add('bg-gray-50', 'border', 'border-gray-300');
          indicator.classList.add('bg-gray-500');
          statusText.className = 'text-sm text-gray-700';
      }
      
      statusText.textContent = message;
    }

    function updateOverallStatus(results) {
      const operational = results.filter(r => r).length;
      const total = results.length;
      const percentage = Math.round((operational / total) * 100);
      
      const overallContainer = document.getElementById('overallStatus');
      const overallText = document.getElementById('overallStatusText');
      const lastChecked = document.getElementById('lastChecked');
      
      // Reset classes
      overallContainer.className = 'p-4 border rounded-lg';
      
      if (percentage >= 75) {
        overallContainer.classList.add('bg-green-50', 'border-green-200');
        overallText.className = 'text-sm text-green-700';
        overallText.textContent = `Healthy (${operational}/${total} services)`;
      } else if (percentage >= 50) {
        overallContainer.classList.add('bg-yellow-50', 'border-yellow-200');
        overallText.className = 'text-sm text-yellow-700';
        overallText.textContent = `Degraded (${operational}/${total} services)`;
      } else {
        overallContainer.classList.add('bg-red-50', 'border-red-200');
        overallText.className = 'text-sm text-red-700';
        overallText.textContent = `Critical (${operational}/${total} services)`;
      }
      
      lastChecked.textContent = `Last checked: ${new Date().toLocaleTimeString()}`;
    }

    // User management functions
    async function loadUserStats() {
      try {
        const response = await fetch(`${API_BASE}/api/users/stats`, {
          method: 'GET',
          headers: window.getAuthHeaders ? window.getAuthHeaders() : { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          const data = await response.json();
          document.getElementById('totalUsers').textContent = data.total_users || 0;
          document.getElementById('adminUsers').textContent = data.admin_users || 0;
        } else {
          document.getElementById('totalUsers').textContent = 'Error';
          document.getElementById('adminUsers').textContent = 'Error';
        }
      } catch (error) {
        console.error('Error loading user stats:', error);
        document.getElementById('totalUsers').textContent = 'Error';
        document.getElementById('adminUsers').textContent = 'Error';
      }
    }

    function showUserModal() {
      document.getElementById('userModal').classList.remove('hidden');
      // Reset form
      document.getElementById('createUserForm').reset();
      hideUserModalMessages();
    }

    function hideUserModal() {
      document.getElementById('userModal').classList.add('hidden');
    }

    function showUserModalError(message) {
      const errorDiv = document.getElementById('userModalError');
      const successDiv = document.getElementById('userModalSuccess');
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
      successDiv.classList.add('hidden');
    }

    function showUserModalSuccess(message) {
      const successDiv = document.getElementById('userModalSuccess');
      const errorDiv = document.getElementById('userModalError');
      successDiv.textContent = message;
      successDiv.classList.remove('hidden');
      errorDiv.classList.add('hidden');
    }

    function hideUserModalMessages() {
      document.getElementById('userModalError').classList.add('hidden');
      document.getElementById('userModalSuccess').classList.add('hidden');
    }

    async function createUser(userData) {
      try {
        const response = await fetch(`${API_BASE}/api/auth/register`, {
          method: 'POST',
          headers: window.getAuthHeaders ? window.getAuthHeaders() : { 'Content-Type': 'application/json' },
          body: JSON.stringify(userData)
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showUserModalSuccess('User created successfully!');
          // Refresh user stats
          setTimeout(() => {
            loadUserStats();
            hideUserModal();
          }, 2000);
          return true;
        } else {
          showUserModalError(data.error || 'Failed to create user');
          return false;
        }
      } catch (error) {
        showUserModalError('Network error. Please try again.');
        console.error('Create user error:', error);
        return false;
      }
    }

    async function runSystemChecks() {
      const refreshBtn = document.getElementById('refreshStatus');
      refreshBtn.textContent = 'Checking...';
      refreshBtn.disabled = true;
      
      // Reset all indicators to checking state
      ['api', 'db', 'satellites', 'location'].forEach(service => {
        updateStatusIndicator(service, 'checking', 'Checking...');
      });
      
      try {
        // Run all checks in parallel
        const results = await Promise.all([
          checkAPIHealth(),
          checkDatabaseHealth(),
          checkSatelliteData(),
          checkLocationServices()
        ]);
        
        updateOverallStatus(results);
      } catch (error) {
        console.error('Error running system checks:', error);
        document.getElementById('overallStatusText').textContent = 'Check failed';
      } finally {
        refreshBtn.textContent = 'Refresh';
        refreshBtn.disabled = false;
      }
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
      // Check if user is admin
      if (window.hasRole && !window.hasRole('admin')) {
        document.getElementById('overallStatusText').textContent = 'Admin access required';
        return;
      }
      
      // Run initial system check
      runSystemChecks();
      
      // Load user stats
      loadUserStats();
      
      // Set up refresh button
      document.getElementById('refreshStatus').addEventListener('click', runSystemChecks);
      
      // Set up user management buttons
      document.getElementById('createUserBtn').addEventListener('click', showUserModal);
      document.getElementById('closeModal').addEventListener('click', hideUserModal);
      document.getElementById('cancelCreate').addEventListener('click', hideUserModal);
      
      // Handle create user form submission
      document.getElementById('createUserForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        hideUserModalMessages();
        
        const submitButton = document.getElementById('submitCreateUser');
        const originalText = submitButton.textContent;
        submitButton.textContent = 'Creating...';
        submitButton.disabled = true;
        
        const formData = new FormData(e.target);
        const userData = {
          username: formData.get('username'),
          email: formData.get('email'),
          password: formData.get('password'),
          role: formData.get('role')
        };
        
        await createUser(userData);
        
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      });
      
      // Close modal when clicking outside
      document.getElementById('userModal').addEventListener('click', (e) => {
        if (e.target.id === 'userModal') {
          hideUserModal();
        }
      });
      
      // Auto-refresh every 30 seconds
      setInterval(runSystemChecks, 30000);
    });
  </script>
</BaseLayout>