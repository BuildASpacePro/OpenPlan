---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Mission Planner - Ground Stations" activePage="groundstations">
  <div class="space-y-6">
    <!-- Header with Controls -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div class="flex justify-between items-center mb-4">
        <h1 class="text-3xl font-bold text-astro-dark">Ground Station Management</h1>
        <div class="flex space-x-3">
          <button id="refreshGroundStations" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg font-medium transition-colors duration-200 text-white">
            Refresh Data
          </button>
          <a href="/activities" class="bg-astro-blue hover:bg-astro-light hover:text-astro-dark px-4 py-2 rounded-lg font-medium transition-colors duration-200 text-white">
            Add Ground Station
          </a>
        </div>
      </div>
      <p class="text-astro-gray">
        Monitor and manage all ground stations in your network with upcoming satellite access windows.
      </p>
    </div>

    <!-- Loading and Error States -->
    <div id="loadingState" class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
      <div class="animate-spin w-8 h-8 border-4 border-astro-blue border-t-transparent rounded-full mx-auto mb-4"></div>
      <p class="text-astro-gray">Loading ground station data...</p>
    </div>

    <div id="errorState" class="hidden bg-red-50 border border-red-200 rounded-lg p-6">
      <div class="flex items-center">
        <div class="w-6 h-6 bg-red-500 rounded-full mr-3"></div>
        <div>
          <h3 class="font-semibold text-red-900">Error Loading Ground Stations</h3>
          <p id="errorMessage" class="text-red-700 text-sm mt-1"></p>
        </div>
      </div>
    </div>

    <!-- Ground Station Grid -->
    <div id="groundStationGrid" class="hidden">
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 class="text-xl font-semibold text-astro-dark mb-4">Active Ground Stations</h2>
        <div id="groundStationCards" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Ground station cards will be populated here -->
        </div>
      </div>

      <!-- Ground Station Statistics -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 class="text-xl font-semibold text-astro-dark mb-4">Network Statistics</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div class="p-4 bg-blue-50 border border-blue-200 rounded-lg text-center">
            <p id="totalCount" class="text-2xl font-bold text-blue-600">-</p>
            <p class="text-sm text-blue-700">Total Stations</p>
          </div>
          <div class="p-4 bg-green-50 border border-green-200 rounded-lg text-center">
            <p id="activeCount" class="text-2xl font-bold text-green-600">-</p>
            <p class="text-sm text-green-700">With Access Windows</p>
          </div>
          <div class="p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-center">
            <p id="windowCount" class="text-2xl font-bold text-yellow-600">-</p>
            <p class="text-sm text-yellow-700">Total Windows</p>
          </div>
          <div class="p-4 bg-purple-50 border border-purple-200 rounded-lg text-center">
            <p id="lastUpdate" class="text-lg font-bold text-purple-600">-</p>
            <p class="text-sm text-purple-700">Last Update</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const API_BASE = 'http://localhost:3000';
    let groundStations = [];
    let accessWindowsMap = {};

    function formatDateTime(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    function formatDuration(durationMinutes) {
      const hours = Math.floor(durationMinutes / 60);
      const minutes = Math.round(durationMinutes % 60);
      
      if (hours > 0) {
        return `${hours}h ${minutes}m`;
      }
      return `${minutes}m`;
    }

    function createGroundStationCard(groundStation, accessWindows) {
      const hasWindows = accessWindows && accessWindows.length > 0;
      const nextThreeWindows = hasWindows ? accessWindows.slice(0, 3) : [];
      
      return `
        <div class="p-6 bg-gray-50 rounded-lg border border-gray-200 hover:shadow-md transition-shadow">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-astro-dark">${groundStation.name}</h3>
            <div class="flex items-center space-x-2">
              <div class="w-4 h-4 rounded-full bg-blue-500 border-2 border-white"></div>
              <span class="w-3 h-3 ${hasWindows ? 'bg-green-500' : 'bg-yellow-500'} rounded-full"></span>
            </div>
          </div>
          
          <div class="space-y-2 text-sm text-astro-gray mb-4">
            <p><span class="font-medium">Latitude:</span> ${parseFloat(groundStation.latitude).toFixed(4)}°</p>
            <p><span class="font-medium">Longitude:</span> ${parseFloat(groundStation.longitude).toFixed(4)}°</p>
            <p><span class="font-medium">Altitude:</span> ${parseFloat(groundStation.altitude).toFixed(0)} m</p>
            <p><span class="font-medium">Status:</span> ${hasWindows ? 'Active' : 'No upcoming windows'}</p>
          </div>

          <!-- Next Access Windows -->
          <div class="mt-4">
            <h4 class="font-medium text-astro-dark mb-2">Next 3 Access Windows:</h4>
            ${nextThreeWindows.length > 0 ? `
              <div class="space-y-2">
                ${nextThreeWindows.map(window => `
                  <div class="p-3 bg-white rounded border border-gray-200 text-xs">
                    <div class="flex justify-between items-start mb-1">
                      <span class="font-semibold text-astro-blue">${window.satellite_name}</span>
                      <span class="text-gray-500">${formatDuration(window.duration_minutes)}</span>
                    </div>
                    <div class="text-gray-600">
                      <div><span class="font-medium">Start:</span> ${formatDateTime(window.start_time)}</div>
                      <div><span class="font-medium">End:</span> ${formatDateTime(window.end_time)}</div>
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : `
              <div class="p-3 bg-white rounded border border-gray-200 text-xs text-gray-500 text-center">
                No access windows in the next 3 days
              </div>
            `}
          </div>
          
          <!-- Action Buttons -->
          <div class="mt-4 flex space-x-2">
            <button onclick="viewGroundStationDetails(${groundStation.gs_id})" 
                    class="px-3 py-1 bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white text-xs rounded transition-colors">
              View Details
            </button>
            ${hasWindows ? `
              <button onclick="viewAllWindows(${groundStation.gs_id})" 
                      class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-xs rounded transition-colors">
                All Windows
              </button>
            ` : ''}
          </div>
        </div>
      `;
    }

    function showError(message) {
      document.getElementById('loadingState').classList.add('hidden');
      document.getElementById('groundStationGrid').classList.add('hidden');
      document.getElementById('errorState').classList.remove('hidden');
      document.getElementById('errorMessage').textContent = message;
    }

    function showLoading() {
      document.getElementById('loadingState').classList.remove('hidden');
      document.getElementById('groundStationGrid').classList.add('hidden');
      document.getElementById('errorState').classList.add('hidden');
    }

    function showGroundStations() {
      document.getElementById('loadingState').classList.add('hidden');
      document.getElementById('errorState').classList.add('hidden');
      document.getElementById('groundStationGrid').classList.remove('hidden');
    }

    async function loadGroundStations() {
      showLoading();
      
      const refreshBtn = document.getElementById('refreshGroundStations');
      refreshBtn.textContent = 'Loading...';
      refreshBtn.disabled = true;

      try {
        // Load ground station data
        const groundStationsResponse = await fetch(`${API_BASE}/api/groundstations`, {
          headers: window.getAuthHeaders ? window.getAuthHeaders() : {}
        });

        if (!groundStationsResponse.ok) {
          throw new Error(`Failed to load ground stations: ${groundStationsResponse.status}`);
        }

        groundStations = await groundStationsResponse.json();

        // Load access windows for each ground station
        const accessWindowPromises = groundStations.map(async (gs) => {
          try {
            const response = await fetch(`${API_BASE}/api/accesswindows/groundstation/${gs.gs_id}`, {
              headers: window.getAuthHeaders ? window.getAuthHeaders() : {}
            });
            
            if (response.ok) {
              const data = await response.json();
              // Sort by start time and filter to future windows only
              const now = new Date();
              const futureWindows = data.access_windows
                .filter(window => new Date(window.start_time) > now)
                .sort((a, b) => new Date(a.start_time) - new Date(b.start_time));
              
              accessWindowsMap[gs.gs_id] = futureWindows;
            } else {
              accessWindowsMap[gs.gs_id] = [];
            }
          } catch (error) {
            console.warn(`Failed to load access windows for ground station ${gs.gs_id}:`, error);
            accessWindowsMap[gs.gs_id] = [];
          }
        });

        await Promise.all(accessWindowPromises);

        // Generate ground station cards
        const groundStationCards = document.getElementById('groundStationCards');
        groundStationCards.innerHTML = groundStations.map(groundStation => 
          createGroundStationCard(groundStation, accessWindowsMap[groundStation.gs_id] || [])
        ).join('');

        // Update statistics
        const stationsWithWindows = groundStations.filter(gs => 
          accessWindowsMap[gs.gs_id] && accessWindowsMap[gs.gs_id].length > 0
        ).length;
        
        const totalWindows = Object.values(accessWindowsMap).reduce((sum, windows) => sum + windows.length, 0);
        
        document.getElementById('totalCount').textContent = groundStations.length;
        document.getElementById('activeCount').textContent = stationsWithWindows;
        document.getElementById('windowCount').textContent = totalWindows;
        document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();

        showGroundStations();
      } catch (error) {
        console.error('Error loading ground stations:', error);
        showError(error.message);
      } finally {
        refreshBtn.textContent = 'Refresh Data';
        refreshBtn.disabled = false;
      }
    }

    // Ground station action functions
    window.viewGroundStationDetails = function(gsId) {
      const groundStation = groundStations.find(gs => gs.gs_id === gsId);
      const windows = accessWindowsMap[gsId] || [];
      
      if (groundStation) {
        alert(`Ground Station Details:\n\nName: ${groundStation.name}\nLatitude: ${groundStation.latitude}°\nLongitude: ${groundStation.longitude}°\nAltitude: ${groundStation.altitude}m\n\nUpcoming Access Windows: ${windows.length}`);
      }
    };

    window.viewAllWindows = function(gsId) {
      const groundStation = groundStations.find(gs => gs.gs_id === gsId);
      const windows = accessWindowsMap[gsId] || [];
      
      if (groundStation && windows.length > 0) {
        const windowsList = windows.slice(0, 10).map(window => 
          `${window.satellite_name}: ${formatDateTime(window.start_time)} - ${formatDateTime(window.end_time)} (${formatDuration(window.duration_minutes)})`
        ).join('\n');
        
        alert(`All Access Windows for ${groundStation.name}:\n\n${windowsList}${windows.length > 10 ? '\n\n... and more' : ''}`);
      }
    };

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
      loadGroundStations();
      
      // Set up refresh button
      document.getElementById('refreshGroundStations').addEventListener('click', loadGroundStations);
      
      // Auto-refresh every 5 minutes
      setInterval(loadGroundStations, 300000);
    });
  </script>
</BaseLayout>