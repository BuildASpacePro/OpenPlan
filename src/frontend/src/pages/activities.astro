---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Mission Planner - Activities" activePage="activities">
  <div class="space-y-6">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h1 class="text-3xl font-bold text-astro-dark mb-4">Mission Activities</h1>
      <p class="text-astro-gray">
        Add targets, satellites, and ground stations to your mission planning system.
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
      <!-- Left Sidebar with Tabs -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <h2 class="text-lg font-semibold text-astro-dark mb-4">Add Resources</h2>
          
          <!-- Tab Navigation -->
          <div class="space-y-2">
            <button id="tabTarget" class="tab-button w-full text-left px-4 py-3 rounded-lg font-medium transition-colors duration-200 bg-astro-blue text-white">
              Add Target
            </button>
            <button id="tabSatellite" class="tab-button w-full text-left px-4 py-3 rounded-lg font-medium transition-colors duration-200 text-gray-700 hover:bg-gray-100">
              Add Satellite
            </button>
            <button id="tabGroundStation" class="tab-button w-full text-left px-4 py-3 rounded-lg font-medium transition-colors duration-200 text-gray-700 hover:bg-gray-100">
              Add Ground Station
            </button>
          </div>
        </div>
      </div>

      <!-- Main Content Area with Forms -->
      <div class="lg:col-span-3">
        <!-- Add Target Form -->
        <div id="formTarget" class="form-container bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-xl font-semibold text-astro-dark mb-4">Add New Target</h3>
          <form id="targetForm" class="space-y-4">
            <div id="targetError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="targetSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert"></div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="targetName" class="block text-sm font-medium text-gray-700 mb-2">Name</label>
                <input type="text" id="targetName" name="name" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Target name">
              </div>
              <div>
                <label for="targetLatitude" class="block text-sm font-medium text-gray-700 mb-2">Latitude (°)</label>
                <input type="number" id="targetLatitude" name="latitude" step="0.000001" min="-90" max="90" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 34.0522">
              </div>
              <div>
                <label for="targetLongitude" class="block text-sm font-medium text-gray-700 mb-2">Longitude (°)</label>
                <input type="number" id="targetLongitude" name="longitude" step="0.000001" min="-180" max="180" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., -118.2437">
              </div>
              <div>
                <label for="targetAltitude" class="block text-sm font-medium text-gray-700 mb-2">Altitude (m)</label>
                <input type="number" id="targetAltitude" name="altitude" step="0.1" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 71.3">
              </div>
              <div>
                <label for="targetStartTime" class="block text-sm font-medium text-gray-700 mb-2">Start Time (UTC)</label>
                <input type="datetime-local" id="targetStartTime" name="start_time" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
              </div>
              <div>
                <label for="targetEndTime" class="block text-sm font-medium text-gray-700 mb-2">End Time (UTC)</label>
                <input type="datetime-local" id="targetEndTime" name="end_time" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
              </div>
            </div>
            <button type="submit" class="w-full bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
              Add Target
            </button>
          </form>
        </div>

        <!-- Add Satellite Form -->
        <div id="formSatellite" class="form-container hidden bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-xl font-semibold text-astro-dark mb-4">Add New Satellite</h3>
          <form id="satelliteForm" class="space-y-4">
            <div id="satelliteError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="satelliteSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert"></div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="satelliteName" class="block text-sm font-medium text-gray-700 mb-2">Name</label>
                <input type="text" id="satelliteName" name="name" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Satellite name">
              </div>
              <div>
                <label for="satelliteMission" class="block text-sm font-medium text-gray-700 mb-2">Mission</label>
                <input type="text" id="satelliteMission" name="mission" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Mission type">
              </div>
              <div>
                <label for="satelliteColour" class="block text-sm font-medium text-gray-700 mb-2">Color</label>
                <select id="satelliteColour" name="colour" required 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
                  <option value="">Select color</option>
                  <option value="red">Red</option>
                  <option value="green">Green</option>
                  <option value="blue">Blue</option>
                  <option value="yellow">Yellow</option>
                  <option value="orange">Orange</option>
                  <option value="purple">Purple</option>
                  <option value="cyan">Cyan</option>
                  <option value="magenta">Magenta</option>
                </select>
              </div>
              <div>
                <label for="satelliteMissionStart" class="block text-sm font-medium text-gray-700 mb-2">Mission Start Time (UTC)</label>
                <input type="datetime-local" id="satelliteMissionStart" name="mission_start_time" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
              </div>
            </div>
            <div>
              <label for="satelliteTLE" class="block text-sm font-medium text-gray-700 mb-2">TLE Data</label>
              <textarea id="satelliteTLE" name="tle" rows="3" required 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                        placeholder="Paste TLE lines 1 and 2 here (line 0 is optional)&#10;Line 1: 1 25544U 98067A   ...&#10;Line 2: 2 25544 51.6461 ..."></textarea>
            </div>
            <div>
              <label for="satelliteURL" class="block text-sm font-medium text-gray-700 mb-2">URL (optional)</label>
              <input type="url" id="satelliteURL" name="url" 
                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                     placeholder="https://example.com/satellite-info">
            </div>
            <button type="submit" class="w-full bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
              Add Satellite
            </button>
          </form>
        </div>

        <!-- Add Ground Station Form -->
        <div id="formGroundStation" class="form-container hidden bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-xl font-semibold text-astro-dark mb-4">Add New Ground Station</h3>
          <form id="groundStationForm" class="space-y-4">
            <div id="gsError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="gsSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert"></div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="gsName" class="block text-sm font-medium text-gray-700 mb-2">Name</label>
                <input type="text" id="gsName" name="name" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Ground station name">
              </div>
              <div>
                <label for="gsLatitude" class="block text-sm font-medium text-gray-700 mb-2">Latitude (°)</label>
                <input type="number" id="gsLatitude" name="latitude" step="0.000001" min="-90" max="90" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 28.5733">
              </div>
              <div>
                <label for="gsLongitude" class="block text-sm font-medium text-gray-700 mb-2">Longitude (°)</label>
                <input type="number" id="gsLongitude" name="longitude" step="0.000001" min="-180" max="180" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., -80.6511">
              </div>
              <div>
                <label for="gsAltitude" class="block text-sm font-medium text-gray-700 mb-2">Altitude (m)</label>
                <input type="number" id="gsAltitude" name="altitude" step="0.1" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 3.0">
              </div>
            </div>
            <button type="submit" class="w-full bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
              Add Ground Station
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    const API_BASE = 'http://localhost:3000';

    // Tab switching functionality
    function setupTabs() {
      const tabs = {
        'tabTarget': 'formTarget',
        'tabSatellite': 'formSatellite',
        'tabGroundStation': 'formGroundStation'
      };

      Object.keys(tabs).forEach(tabId => {
        document.getElementById(tabId).addEventListener('click', () => {
          // Hide all forms
          Object.values(tabs).forEach(formId => {
            document.getElementById(formId).classList.add('hidden');
          });
          
          // Reset all tab buttons
          Object.keys(tabs).forEach(btnId => {
            const btn = document.getElementById(btnId);
            btn.classList.remove('bg-astro-blue', 'text-white');
            btn.classList.add('text-gray-700', 'hover:bg-gray-100');
          });
          
          // Show selected form
          document.getElementById(tabs[tabId]).classList.remove('hidden');
          
          // Activate selected tab
          const activeTab = document.getElementById(tabId);
          activeTab.classList.add('bg-astro-blue', 'text-white');
          activeTab.classList.remove('text-gray-700', 'hover:bg-gray-100');
        });
      });
    }

    // Utility functions
    function showMessage(elementId, message, isError = false) {
      const el = document.getElementById(elementId);
      el.textContent = message;
      el.classList.remove('hidden');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        el.classList.add('hidden');
      }, 5000);
    }

    function hideMessage(elementId) {
      document.getElementById(elementId).classList.add('hidden');
    }

    // Target form submission
    function setupTargetForm() {
      document.getElementById('targetForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        hideMessage('targetError');
        hideMessage('targetSuccess');
        
        const formData = new FormData(e.target);
        const data = {
          name: formData.get('name'),
          latitude: parseFloat(formData.get('latitude')),
          longitude: parseFloat(formData.get('longitude')),
          altitude: parseFloat(formData.get('altitude')),
          start_time: formData.get('start_time'),
          end_time: formData.get('end_time')
        };

        try {
          // Note: This would need a target endpoint to be implemented
          console.log('Target data to submit:', data);
          showMessage('targetSuccess', 'Target data prepared (endpoint not implemented yet)', false);
          e.target.reset();
        } catch (error) {
          showMessage('targetError', 'Failed to add target: ' + error.message, true);
        }
      });
    }

    // Satellite form submission
    function setupSatelliteForm() {
      document.getElementById('satelliteForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        hideMessage('satelliteError');
        hideMessage('satelliteSuccess');
        
        const formData = new FormData(e.target);
        
        // Parse TLE data
        const tleText = formData.get('tle').trim();
        const tleLines = tleText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
        
        if (tleLines.length < 2) {
          showMessage('satelliteError', 'TLE data must contain at least 2 lines', true);
          return;
        }

        // Find TLE lines 1 and 2 (they start with "1 " and "2 ")
        const tle1 = tleLines.find(line => line.startsWith('1 '));
        const tle2 = tleLines.find(line => line.startsWith('2 '));
        
        if (!tle1 || !tle2) {
          showMessage('satelliteError', 'TLE data must contain lines starting with "1 " and "2 "', true);
          return;
        }

        const data = {
          name: formData.get('name'),
          mission: formData.get('mission'),
          colour: formData.get('colour'),
          mission_start_time: formData.get('mission_start_time'),
          tle_1: tle1,
          tle_2: tle2
        };

        try {
          const headers = window.getAuthHeaders ? window.getAuthHeaders() : {'Content-Type': 'application/json'};
          const response = await fetch(`${API_BASE}/api/satellites`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json();
            showMessage('satelliteSuccess', `Satellite "${result.name}" added successfully!`, false);
            e.target.reset();
          } else {
            const error = await response.json();
            showMessage('satelliteError', error.error || 'Failed to add satellite', true);
          }
        } catch (error) {
          showMessage('satelliteError', 'Network error: ' + error.message, true);
        }
      });
    }

    // Ground station form submission
    function setupGroundStationForm() {
      document.getElementById('groundStationForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        hideMessage('gsError');
        hideMessage('gsSuccess');
        
        const formData = new FormData(e.target);
        const data = {
          name: formData.get('name'),
          latitude: parseFloat(formData.get('latitude')),
          longitude: parseFloat(formData.get('longitude')),
          altitude: parseFloat(formData.get('altitude'))
        };

        try {
          const headers = window.getAuthHeaders ? window.getAuthHeaders() : {'Content-Type': 'application/json'};
          const response = await fetch(`${API_BASE}/api/groundstations`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json();
            showMessage('gsSuccess', `Ground station "${result.name}" added successfully!`, false);
            e.target.reset();
          } else {
            const error = await response.json();
            showMessage('gsError', error.error || 'Failed to add ground station', true);
          }
        } catch (error) {
          showMessage('gsError', 'Network error: ' + error.message, true);
        }
      });
    }

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', function() {
      setupTabs();
      setupTargetForm();
      setupSatelliteForm();
      setupGroundStationForm();
    });
  </script>
</BaseLayout>