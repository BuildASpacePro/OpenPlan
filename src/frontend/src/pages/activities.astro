---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Mission Planner - Activities" activePage="activities">
  <div class="space-y-6">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h1 class="text-3xl font-bold text-astro-dark mb-4">Mission Activities</h1>
      <p class="text-astro-gray">
        Add targets, satellites, and ground stations to your mission planning system.
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
      <!-- Left Sidebar with Tabs -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <h2 class="text-lg font-semibold text-astro-dark mb-4">Add Resources</h2>
          
          <!-- Tab Navigation -->
          <div class="space-y-2">
            <button id="tabTarget" class="tab-button w-full text-left px-4 py-3 rounded-lg font-medium transition-colors duration-200 bg-astro-blue text-white">
              Add Target
            </button>
            <button id="tabSatellite" class="tab-button w-full text-left px-4 py-3 rounded-lg font-medium transition-colors duration-200 text-gray-700 hover:bg-gray-100">
              Add Satellite
            </button>
            <button id="tabCluster" class="tab-button w-full text-left px-4 py-3 rounded-lg font-medium transition-colors duration-200 text-gray-700 hover:bg-gray-100">
              Add Cluster
            </button>
            <button id="tabGroundStation" class="tab-button w-full text-left px-4 py-3 rounded-lg font-medium transition-colors duration-200 text-gray-700 hover:bg-gray-100">
              Add Ground Station
            </button>
          </div>
        </div>
      </div>

      <!-- Main Content Area with Forms -->
      <div class="lg:col-span-3">
        <!-- Add Target Form -->
        <div id="formTarget" class="form-container bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-xl font-semibold text-astro-dark mb-4">Add New Target</h3>
          <form id="targetForm" class="space-y-4">
            <div id="targetError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="targetSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert"></div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="targetName" class="block text-sm font-medium text-gray-700 mb-2">Name</label>
                <input type="text" id="targetName" name="name" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Target name">
              </div>
              <div>
                <label for="targetLatitude" class="block text-sm font-medium text-gray-700 mb-2">Latitude (°)</label>
                <input type="number" id="targetLatitude" name="latitude" step="0.000001" min="-90" max="90" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 34.0522">
              </div>
              <div>
                <label for="targetLongitude" class="block text-sm font-medium text-gray-700 mb-2">Longitude (°)</label>
                <input type="number" id="targetLongitude" name="longitude" step="0.000001" min="-180" max="180" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., -118.2437">
              </div>
              <div>
                <label for="targetAltitude" class="block text-sm font-medium text-gray-700 mb-2">Altitude (m)</label>
                <input type="number" id="targetAltitude" name="altitude" step="0.1" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 71.3">
              </div>
              <div>
                <label for="targetStartTime" class="block text-sm font-medium text-gray-700 mb-2">Start Time (UTC)</label>
                <input type="datetime-local" id="targetStartTime" name="start_time" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
              </div>
              <div>
                <label for="targetEndTime" class="block text-sm font-medium text-gray-700 mb-2">End Time (UTC)</label>
                <input type="datetime-local" id="targetEndTime" name="end_time" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
              </div>
            </div>
            <button type="submit" class="w-full bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
              Add Target
            </button>
          </form>
        </div>

        <!-- Add Satellite Form -->
        <div id="formSatellite" class="form-container hidden bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-xl font-semibold text-astro-dark mb-4">Add New Satellite</h3>
          <form id="satelliteForm" class="space-y-4">
            <div id="satelliteError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="satelliteSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert"></div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="satelliteName" class="block text-sm font-medium text-gray-700 mb-2">Name</label>
                <input type="text" id="satelliteName" name="name" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Satellite name">
              </div>
              <div>
                <label for="satelliteMission" class="block text-sm font-medium text-gray-700 mb-2">Mission</label>
                <input type="text" id="satelliteMission" name="mission" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Mission type">
              </div>
              <div>
                <label for="satelliteColour" class="block text-sm font-medium text-gray-700 mb-2">Color</label>
                <select id="satelliteColour" name="colour" required 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
                  <option value="">Select color</option>
                  <option value="red">Red</option>
                  <option value="green">Green</option>
                  <option value="blue">Blue</option>
                  <option value="yellow">Yellow</option>
                  <option value="orange">Orange</option>
                  <option value="purple">Purple</option>
                  <option value="cyan">Cyan</option>
                  <option value="magenta">Magenta</option>
                </select>
              </div>
              <div>
                <label for="satelliteMissionStart" class="block text-sm font-medium text-gray-700 mb-2">Mission Start Time (UTC)</label>
                <input type="datetime-local" id="satelliteMissionStart" name="mission_start_time" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
              </div>
            </div>
            <div>
              <label for="satelliteTLE" class="block text-sm font-medium text-gray-700 mb-2">TLE Data</label>
              <textarea id="satelliteTLE" name="tle" rows="3" required 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                        placeholder="Paste TLE lines 1 and 2 here (line 0 is optional)&#10;Line 1: 1 25544U 98067A   ...&#10;Line 2: 2 25544 51.6461 ..."></textarea>
            </div>
            <div>
              <label for="satelliteURL" class="block text-sm font-medium text-gray-700 mb-2">TLE URL (optional)</label>
              <div class="flex gap-2">
                <input type="url" id="satelliteURL" name="url" 
                       class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="https://celestrak.org/NORAD/elements/gp.php?CATNR=25544">
                <button type="button" id="fetchTLEButton" 
                        class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-md transition-colors duration-200">
                  Fetch TLE
                </button>
              </div>
              <p class="text-xs text-gray-500 mt-1">Enter a URL containing plaintext TLE data. Supports single or multiple satellites.</p>
            </div>
            <div>
              <label for="satelliteTags" class="block text-sm font-medium text-gray-700 mb-2">Tags (optional)</label>
              <div class="relative">
                <input type="text" id="satelliteTags" name="tags" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="active, leo, spacex; communication mission">
                <div id="satelliteTagBubbles" class="mt-2 flex flex-wrap gap-1 min-h-[1rem]">
                  <!-- Tag bubbles will be populated here -->
                </div>
              </div>
              <p class="text-xs text-gray-500 mt-1">Enter tags separated by spaces, commas, or semicolons. Examples: active, leo, spacex</p>
            </div>
            <button type="submit" class="w-full bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
              Add Satellite
            </button>
          </form>
        </div>

        <!-- Add Cluster Form -->
        <div id="formCluster" class="form-container hidden bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-xl font-semibold text-astro-dark mb-4">Add Satellite Cluster</h3>
          <p class="text-sm text-gray-600 mb-6">Add multiple satellites at once from TLE data. You can either paste TLE text directly or fetch from a URL containing multiple satellites.</p>
          
          <form id="clusterForm" class="space-y-6">
            <div id="clusterError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="clusterSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="clusterProgress" class="hidden bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded relative" role="alert"></div>

            <!-- Input Method Selection -->
            <div class="border border-gray-200 rounded-lg p-4">
              <h4 class="text-md font-medium text-gray-900 mb-3">Input Method</h4>
              <div class="space-y-3">
                <label class="flex items-center">
                  <input type="radio" name="inputMethod" value="text" checked class="text-astro-blue focus:ring-astro-blue">
                  <span class="ml-2 text-sm font-medium text-gray-700">Paste TLE Text</span>
                </label>
                <label class="flex items-center">
                  <input type="radio" name="inputMethod" value="url" class="text-astro-blue focus:ring-astro-blue">
                  <span class="ml-2 text-sm font-medium text-gray-700">Fetch from URL</span>
                </label>
              </div>
            </div>

            <!-- TLE Text Input -->
            <div id="textInputSection">
              <label for="clusterTLEText" class="block text-sm font-medium text-gray-700 mb-2">
                TLE Data
                <span class="text-xs text-gray-500">(Multiple satellites supported - each with name + 2 TLE lines)</span>
              </label>
              <textarea id="clusterTLEText" name="tleText" rows="12" 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent font-mono text-sm" 
                        placeholder="SATELLITE 1 NAME
1 25544U 98067A   25163.94409331  .00015737  00000+0  28160-3 0  9992
2 25544  51.6370 328.1052 0001550 236.0752 124.0090 15.50158723514509
SATELLITE 2 NAME
1 35931U 09051A   25164.17993127  .00000097  00000+0  92060-4 0  9999
2 35931  98.2218 183.2303 0016307 191.6382 168.4410 13.99586122827715"></textarea>
            </div>

            <!-- URL Input -->
            <div id="urlInputSection" class="hidden">
              <label for="clusterURL" class="block text-sm font-medium text-gray-700 mb-2">TLE Data URL</label>
              <div class="flex gap-2">
                <input type="url" id="clusterURL" name="url" 
                       class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="https://celestrak.org/NORAD/elements/gp.php?INTDES=2009-051">
                <button type="button" id="fetchClusterTLEButton" 
                        class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-md transition-colors duration-200">
                  Fetch TLEs
                </button>
              </div>
              <p class="text-xs text-gray-500 mt-1">Enter a URL containing plaintext TLE data for multiple satellites.</p>
            </div>

            <!-- Default Values -->
            <div class="border border-gray-200 rounded-lg p-4">
              <h4 class="text-md font-medium text-gray-900 mb-3">Default Values for All Satellites</h4>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label for="clusterMission" class="block text-sm font-medium text-gray-700 mb-2">Mission Type</label>
                  <input type="text" id="clusterMission" name="defaultMission" 
                         class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                         placeholder="e.g., Constellation, LEO ISP, Research" value="Constellation">
                </div>
                <div>
                  <label for="clusterColour" class="block text-sm font-medium text-gray-700 mb-2">Color</label>
                  <select id="clusterColour" name="defaultColour" 
                          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
                    <option value="blue">Blue</option>
                    <option value="red">Red</option>
                    <option value="green">Green</option>
                    <option value="yellow">Yellow</option>
                    <option value="orange">Orange</option>
                    <option value="purple">Purple</option>
                    <option value="cyan">Cyan</option>
                    <option value="magenta">Magenta</option>
                  </select>
                </div>
                <div class="md:col-span-2">
                  <label for="clusterMissionStart" class="block text-sm font-medium text-gray-700 mb-2">Mission Start Time (UTC)</label>
                  <input type="datetime-local" id="clusterMissionStart" name="defaultMissionStart" 
                         class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent">
                </div>
                <div class="md:col-span-2">
                  <label for="clusterTags" class="block text-sm font-medium text-gray-700 mb-2">Default Tags (optional)</label>
                  <div class="relative">
                    <input type="text" id="clusterTags" name="defaultTags" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                           placeholder="constellation, leo, commercial; starlink mission">
                    <div id="clusterTagBubbles" class="mt-2 flex flex-wrap gap-1 min-h-[1rem]">
                      <!-- Tag bubbles will be populated here -->
                    </div>
                  </div>
                  <p class="text-xs text-gray-500 mt-1">Tags applied to all satellites in cluster. Use spaces, commas, or semicolons.</p>
                </div>
              </div>
            </div>

            <!-- Preview Section -->
            <div id="clusterPreview" class="hidden border border-gray-200 rounded-lg p-4">
              <h4 class="text-md font-medium text-gray-900 mb-3">Satellite Preview</h4>
              <div id="clusterPreviewContent" class="bg-gray-50 rounded p-3 max-h-48 overflow-y-auto">
                <!-- Preview content will be populated here -->
              </div>
            </div>

            <div class="flex gap-3">
              <button type="button" id="previewClusterButton" 
                      class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
                Preview Satellites
              </button>
              <button type="submit" id="submitClusterButton" disabled
                      class="flex-1 bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-300 disabled:cursor-not-allowed">
                Add All Satellites
              </button>
            </div>
          </form>
        </div>

        <!-- Add Ground Station Form -->
        <div id="formGroundStation" class="form-container hidden bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-xl font-semibold text-astro-dark mb-4">Add New Ground Station</h3>
          <form id="groundStationForm" class="space-y-4">
            <div id="gsError" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert"></div>
            <div id="gsSuccess" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert"></div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="gsName" class="block text-sm font-medium text-gray-700 mb-2">Name</label>
                <input type="text" id="gsName" name="name" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="Ground station name">
              </div>
              <div>
                <label for="gsLatitude" class="block text-sm font-medium text-gray-700 mb-2">Latitude (°)</label>
                <input type="number" id="gsLatitude" name="latitude" step="0.000001" min="-90" max="90" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 28.5733">
              </div>
              <div>
                <label for="gsLongitude" class="block text-sm font-medium text-gray-700 mb-2">Longitude (°)</label>
                <input type="number" id="gsLongitude" name="longitude" step="0.000001" min="-180" max="180" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., -80.6511">
              </div>
              <div>
                <label for="gsAltitude" class="block text-sm font-medium text-gray-700 mb-2">Altitude (m)</label>
                <input type="number" id="gsAltitude" name="altitude" step="0.1" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-astro-blue focus:border-transparent" 
                       placeholder="e.g., 3.0">
              </div>
            </div>
            <button type="submit" class="w-full bg-astro-blue hover:bg-astro-light hover:text-astro-dark text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
              Add Ground Station
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    const API_BASE = 'http://localhost:3000';

    // Tab switching functionality
    function setupTabs() {
      const tabs = {
        'tabTarget': 'formTarget',
        'tabSatellite': 'formSatellite',
        'tabCluster': 'formCluster',
        'tabGroundStation': 'formGroundStation'
      };

      Object.keys(tabs).forEach(tabId => {
        document.getElementById(tabId).addEventListener('click', () => {
          // Hide all forms
          Object.values(tabs).forEach(formId => {
            document.getElementById(formId).classList.add('hidden');
          });
          
          // Reset all tab buttons
          Object.keys(tabs).forEach(btnId => {
            const btn = document.getElementById(btnId);
            btn.classList.remove('bg-astro-blue', 'text-white');
            btn.classList.add('text-gray-700', 'hover:bg-gray-100');
          });
          
          // Show selected form
          document.getElementById(tabs[tabId]).classList.remove('hidden');
          
          // Activate selected tab
          const activeTab = document.getElementById(tabId);
          activeTab.classList.add('bg-astro-blue', 'text-white');
          activeTab.classList.remove('text-gray-700', 'hover:bg-gray-100');
        });
      });
    }

    // Utility functions
    function showMessage(elementId, message, isError = false) {
      const el = document.getElementById(elementId);
      el.textContent = message;
      el.classList.remove('hidden');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        el.classList.add('hidden');
      }, 5000);
    }

    function hideMessage(elementId) {
      document.getElementById(elementId).classList.add('hidden');
    }

    // Target form submission
    function setupTargetForm() {
      document.getElementById('targetForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        hideMessage('targetError');
        hideMessage('targetSuccess');
        
        const formData = new FormData(e.target);
        const data = {
          name: formData.get('name'),
          latitude: parseFloat(formData.get('latitude')),
          longitude: parseFloat(formData.get('longitude')),
          altitude: parseFloat(formData.get('altitude')),
          start_time: formData.get('start_time'),
          end_time: formData.get('end_time')
        };

        try {
          // Note: This would need a target endpoint to be implemented
          console.log('Target data to submit:', data);
          showMessage('targetSuccess', 'Target data prepared (endpoint not implemented yet)', false);
          e.target.reset();
        } catch (error) {
          showMessage('targetError', 'Failed to add target: ' + error.message, true);
        }
      });
    }

    // TLE fetching and parsing functionality
    function parseTLEData(tleText) {
      const lines = tleText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      const satellites = [];
      
      // Validate line length (max 69 characters per TLE specification)
      for (const line of lines) {
        if (line.length > 69) {
          throw new Error(`Line exceeds 69 characters: "${line.substring(0, 50)}..."`);
        }
      }
      
      // Parse satellites - each satellite has 3 lines (name, line1, line2)
      // But sometimes just 2 lines (line1, line2) if name is embedded
      for (let i = 0; i < lines.length; i++) {
        const currentLine = lines[i];
        
        // Check if this is a TLE line 1
        if (currentLine.startsWith('1 ')) {
          const tle1 = currentLine;
          const tle2 = lines[i + 1];
          
          if (!tle2 || !tle2.startsWith('2 ')) {
            throw new Error(`Invalid TLE format: Line 1 not followed by Line 2 at line ${i + 1}`);
          }
          
          // Look for satellite name in the previous line
          let satelliteName = '';
          if (i > 0 && !lines[i - 1].startsWith('1 ') && !lines[i - 1].startsWith('2 ')) {
            satelliteName = lines[i - 1].trim();
          } else {
            // Extract name from TLE if no separate name line
            const catalogNumber = tle1.substring(2, 7).trim();
            satelliteName = `SATELLITE ${catalogNumber}`;
          }
          
          satellites.push({
            name: satelliteName,
            tle1: tle1,
            tle2: tle2
          });
          
          i++; // Skip the next line since we already processed it
        }
      }
      
      if (satellites.length === 0) {
        throw new Error('No valid TLE data found in the response');
      }
      
      return satellites;
    }

    async function fetchTLEFromURL(url) {
      try {
        // Use the API proxy endpoint to avoid CORS issues
        const headers = window.getAuthHeaders ? window.getAuthHeaders() : {'Content-Type': 'application/json'};
        const response = await fetch(`${API_BASE}/api/tle/fetch`, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify({ url: url })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        if (!result.success || !result.data) {
          throw new Error('Invalid response from TLE fetch proxy');
        }
        
        return parseTLEData(result.data);
      } catch (error) {
        throw new Error(`Failed to fetch TLE data: ${error.message}`);
      }
    }

    function setupTLEFetching() {
      document.getElementById('fetchTLEButton').addEventListener('click', async () => {
        const urlInput = document.getElementById('satelliteURL');
        const tleTextarea = document.getElementById('satelliteTLE');
        const nameInput = document.getElementById('satelliteName');
        const button = document.getElementById('fetchTLEButton');
        
        const url = urlInput.value.trim();
        if (!url) {
          showMessage('satelliteError', 'Please enter a URL first', true);
          return;
        }
        
        // Disable button and show loading state
        button.disabled = true;
        button.textContent = 'Fetching...';
        hideMessage('satelliteError');
        hideMessage('satelliteSuccess');
        
        try {
          const satellites = await fetchTLEFromURL(url);
          
          if (satellites.length === 1) {
            // Single satellite - populate the form
            const sat = satellites[0];
            nameInput.value = sat.name;
            tleTextarea.value = `${sat.tle1}\n${sat.tle2}`;
            showMessage('satelliteSuccess', `Successfully fetched TLE data for ${sat.name}`, false);
          } else {
            // Multiple satellites - show in textarea for review
            const tleData = satellites.map(sat => `${sat.name}\n${sat.tle1}\n${sat.tle2}`).join('\n');
            tleTextarea.value = tleData;
            nameInput.value = `${satellites.length} satellites from URL`;
            showMessage('satelliteSuccess', `Found ${satellites.length} satellites. Review the data below and submit to add the first satellite, or manually separate them.`, false);
          }
        } catch (error) {
          showMessage('satelliteError', error.message, true);
        } finally {
          // Re-enable button
          button.disabled = false;
          button.textContent = 'Fetch TLE';
        }
      });
    }

    // Satellite form submission
    function setupSatelliteForm() {
      document.getElementById('satelliteForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        hideMessage('satelliteError');
        hideMessage('satelliteSuccess');
        
        const formData = new FormData(e.target);
        
        // Parse TLE data
        const tleText = formData.get('tle').trim();
        
        try {
          // Use the same parsing function as the URL fetcher
          const satellites = parseTLEData(tleText);
          
          // For form submission, we'll only add the first satellite if multiple are found
          const firstSat = satellites[0];
          var tle1 = firstSat.tle1;
          var tle2 = firstSat.tle2;
          
          // If multiple satellites found, warn the user
          if (satellites.length > 1) {
            showMessage('satelliteSuccess', `Found ${satellites.length} satellites. Adding the first one: ${firstSat.name}. Please submit again to add others.`, false);
          }
        } catch (error) {
          showMessage('satelliteError', error.message, true);
          return;
        }

        // Get tags from tag manager
        const tags = satelliteTagManager ? satelliteTagManager.getTags() : [];

        const data = {
          name: formData.get('name'),
          mission: formData.get('mission'),
          colour: formData.get('colour'),
          mission_start_time: formData.get('mission_start_time'),
          tle_1: tle1,
          tle_2: tle2,
          tags: tags // Include tags in submission
        };

        try {
          const headers = window.getAuthHeaders ? window.getAuthHeaders() : {'Content-Type': 'application/json'};
          const response = await fetch(`${API_BASE}/api/satellites`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json();
            showMessage('satelliteSuccess', `Satellite "${result.name}" added successfully!`, false);
            e.target.reset();
            if (satelliteTagManager) satelliteTagManager.clear(); // Clear tags
          } else {
            const error = await response.json();
            showMessage('satelliteError', error.error || 'Failed to add satellite', true);
          }
        } catch (error) {
          showMessage('satelliteError', 'Network error: ' + error.message, true);
        }
      });
    }

    // Ground station form submission
    function setupGroundStationForm() {
      document.getElementById('groundStationForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        hideMessage('gsError');
        hideMessage('gsSuccess');
        
        const formData = new FormData(e.target);
        const data = {
          name: formData.get('name'),
          latitude: parseFloat(formData.get('latitude')),
          longitude: parseFloat(formData.get('longitude')),
          altitude: parseFloat(formData.get('altitude'))
        };

        try {
          const headers = window.getAuthHeaders ? window.getAuthHeaders() : {'Content-Type': 'application/json'};
          const response = await fetch(`${API_BASE}/api/groundstations`, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json();
            showMessage('gsSuccess', `Ground station "${result.name}" added successfully!`, false);
            e.target.reset();
          } else {
            const error = await response.json();
            showMessage('gsError', error.error || 'Failed to add ground station', true);
          }
        } catch (error) {
          showMessage('gsError', 'Network error: ' + error.message, true);
        }
      });
    }

    // Cluster management functionality
    let parsedSatellites = [];

    function setupClusterForm() {
      // Input method switching
      const textRadio = document.querySelector('input[name="inputMethod"][value="text"]');
      const urlRadio = document.querySelector('input[name="inputMethod"][value="url"]');
      const textSection = document.getElementById('textInputSection');
      const urlSection = document.getElementById('urlInputSection');

      function toggleInputMethod() {
        if (textRadio.checked) {
          textSection.classList.remove('hidden');
          urlSection.classList.add('hidden');
        } else {
          textSection.classList.add('hidden');
          urlSection.classList.remove('hidden');
        }
      }

      textRadio.addEventListener('change', toggleInputMethod);
      urlRadio.addEventListener('change', toggleInputMethod);

      // Set default mission start time to current time
      const missionStartInput = document.getElementById('clusterMissionStart');
      const now = new Date();
      now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
      missionStartInput.value = now.toISOString().slice(0, 16);

      // URL fetching for cluster
      document.getElementById('fetchClusterTLEButton').addEventListener('click', async () => {
        const urlInput = document.getElementById('clusterURL');
        const textArea = document.getElementById('clusterTLEText');
        const button = document.getElementById('fetchClusterTLEButton');
        
        const url = urlInput.value.trim();
        if (!url) {
          showClusterMessage('Please enter a URL first', 'error');
          return;
        }
        
        button.disabled = true;
        button.textContent = 'Fetching...';
        hideClusterMessages();
        
        try {
          const satellites = await fetchTLEFromURL(url);
          const tleData = satellites.map(sat => `${sat.name}\n${sat.tle1}\n${sat.tle2}`).join('\n');
          textArea.value = tleData;
          
          // Switch to text input to show the fetched data
          textRadio.checked = true;
          toggleInputMethod();
          
          showClusterMessage(`Successfully fetched TLE data for ${satellites.length} satellites`, 'success');
        } catch (error) {
          showClusterMessage(error.message, 'error');
        } finally {
          button.disabled = false;
          button.textContent = 'Fetch TLEs';
        }
      });

      // Preview functionality
      document.getElementById('previewClusterButton').addEventListener('click', () => {
        try {
          hideClusterMessages();
          
          const inputMethod = document.querySelector('input[name="inputMethod"]:checked').value;
          let tleText = '';
          
          if (inputMethod === 'text') {
            tleText = document.getElementById('clusterTLEText').value.trim();
          } else {
            showClusterMessage('Please fetch URL data first or switch to text input', 'error');
            return;
          }
          
          if (!tleText) {
            showClusterMessage('Please provide TLE data to preview', 'error');
            return;
          }
          
          // Parse satellites
          parsedSatellites = parseTLEData(tleText);
          
          // Get default values
          const defaultMission = document.getElementById('clusterMission').value || 'Constellation';
          const defaultColour = document.getElementById('clusterColour').value;
          const defaultMissionStart = document.getElementById('clusterMissionStart').value;
          
          // Show preview
          displaySatellitePreview(parsedSatellites, {
            mission: defaultMission,
            colour: defaultColour,
            mission_start_time: defaultMissionStart
          });
          
          // Enable submit button
          document.getElementById('submitClusterButton').disabled = false;
          
          showClusterMessage(`Parsed ${parsedSatellites.length} satellites successfully`, 'success');
          
        } catch (error) {
          showClusterMessage(error.message, 'error');
          parsedSatellites = [];
          document.getElementById('submitClusterButton').disabled = true;
        }
      });

      // Form submission
      document.getElementById('clusterForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (parsedSatellites.length === 0) {
          showClusterMessage('Please preview satellites first', 'error');
          return;
        }
        
        await submitClusterSatellites();
      });
    }

    function displaySatellitePreview(satellites, defaults) {
      const previewSection = document.getElementById('clusterPreview');
      const previewContent = document.getElementById('clusterPreviewContent');
      
      const previewHTML = satellites.map((sat, index) => `
        <div class="flex justify-between items-center py-2 px-3 bg-white rounded border ${index % 2 === 0 ? 'border-gray-100' : 'border-gray-200'}">
          <div>
            <span class="font-medium text-gray-900">${sat.name}</span>
            <span class="text-sm text-gray-500 ml-2">${defaults.mission}</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-4 h-4 rounded-full" style="background-color: ${defaults.colour}"></div>
            <span class="text-xs text-gray-400">Catalog: ${sat.tle1.substring(2, 7).trim()}</span>
          </div>
        </div>
      `).join('');
      
      previewContent.innerHTML = previewHTML;
      previewSection.classList.remove('hidden');
    }

    async function submitClusterSatellites() {
      const submitButton = document.getElementById('submitClusterButton');
      const defaultMission = document.getElementById('clusterMission').value || 'Constellation';
      const defaultColour = document.getElementById('clusterColour').value;
      const defaultMissionStart = document.getElementById('clusterMissionStart').value;
      const defaultTags = clusterTagManager ? clusterTagManager.getTags() : [];
      
      if (!defaultMissionStart) {
        showClusterMessage('Please provide a mission start time', 'error');
        return;
      }
      
      submitButton.disabled = true;
      submitButton.textContent = 'Creating Satellites...';
      hideClusterMessages();
      
      const results = {
        successful: [],
        failed: []
      };
      
      try {
        showClusterMessage(`Creating ${parsedSatellites.length} satellites...`, 'progress');
        
        // Create satellites one by one to provide detailed feedback
        for (let i = 0; i < parsedSatellites.length; i++) {
          const sat = parsedSatellites[i];
          
          showClusterMessage(`Creating satellite ${i + 1}/${parsedSatellites.length}: ${sat.name}`, 'progress');
          
          try {
            const satelliteData = {
              name: sat.name,
              mission: defaultMission,
              colour: defaultColour,
              mission_start_time: defaultMissionStart,
              tle_1: sat.tle1,
              tle_2: sat.tle2,
              tags: defaultTags // Include default tags for all satellites in cluster
            };
            
            const headers = window.getAuthHeaders ? window.getAuthHeaders() : {'Content-Type': 'application/json'};
            const response = await fetch(`${API_BASE}/api/satellites`, {
              method: 'POST',
              headers: headers,
              body: JSON.stringify(satelliteData)
            });
            
            if (response.ok) {
              const result = await response.json();
              results.successful.push({ name: sat.name, data: result });
            } else {
              const error = await response.json();
              results.failed.push({ name: sat.name, error: error.error || 'Unknown error' });
            }
          } catch (error) {
            results.failed.push({ name: sat.name, error: error.message });
          }
        }
        
        // Display final results
        displayClusterResults(results);
        
        // Reset form if all successful
        if (results.failed.length === 0) {
          document.getElementById('clusterForm').reset();
          document.getElementById('clusterPreview').classList.add('hidden');
          parsedSatellites = [];
          document.getElementById('submitClusterButton').disabled = true;
          if (clusterTagManager) clusterTagManager.clear(); // Clear tags
          
          // Reset mission start time
          const now = new Date();
          now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
          document.getElementById('clusterMissionStart').value = now.toISOString().slice(0, 16);
        }
        
      } catch (error) {
        showClusterMessage(`Bulk creation failed: ${error.message}`, 'error');
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Add All Satellites';
      }
    }

    function displayClusterResults(results) {
      const total = results.successful.length + results.failed.length;
      let message = `Cluster creation completed: ${results.successful.length}/${total} satellites created successfully`;
      
      if (results.failed.length > 0) {
        message += `\n\nFailed satellites:\n${results.failed.map(f => `• ${f.name}: ${f.error}`).join('\n')}`;
        showClusterMessage(message, 'error');
      } else {
        showClusterMessage(message, 'success');
      }
    }

    function showClusterMessage(message, type) {
      hideClusterMessages();
      const elementId = type === 'error' ? 'clusterError' : 
                      type === 'progress' ? 'clusterProgress' : 'clusterSuccess';
      const element = document.getElementById(elementId);
      element.textContent = message;
      element.classList.remove('hidden');
      
      // Auto-hide success and progress messages after 5 seconds
      if (type === 'success' || type === 'progress') {
        setTimeout(() => {
          element.classList.add('hidden');
        }, 5000);
      }
    }

    function hideClusterMessages() {
      ['clusterError', 'clusterSuccess', 'clusterProgress'].forEach(id => {
        document.getElementById(id).classList.add('hidden');
      });
    }

    // ===============================================
    // SATELLITE TAGGING SYSTEM
    // ===============================================

    // Tag parsing and visualization system
    class TagManager {
      constructor(inputId, bubblesId) {
        this.inputElement = document.getElementById(inputId);
        this.bubblesContainer = document.getElementById(bubblesId);
        this.tags = new Set(); // Use Set to prevent duplicates
        this.setupEventListeners();
      }

      setupEventListeners() {
        if (!this.inputElement || !this.bubblesContainer) return;

        // Real-time parsing as user types
        this.inputElement.addEventListener('input', (e) => {
          this.parseAndDisplayTags(e.target.value);
        });

        // Handle Enter key and other special keys
        this.inputElement.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            this.finalizeTags();
          } else if (e.key === 'Backspace' && e.target.value === '' && this.tags.size > 0) {
            // Remove last tag if input is empty and backspace is pressed
            this.removeLastTag();
          }
        });

        // Handle paste events for bulk tag addition
        this.inputElement.addEventListener('paste', (e) => {
          setTimeout(() => {
            this.parseAndDisplayTags(e.target.value);
          }, 10);
        });
      }

      parseAndDisplayTags(inputValue) {
        // Split by multiple delimiters: spaces, commas, semicolons
        const parts = inputValue.split(/[\s,;]+/).filter(part => part.trim().length > 0);
        
        // Find completed tags (everything except the last part being typed)
        const completedTags = parts.slice(0, -1);
        const currentTag = parts[parts.length - 1] || '';

        // Add completed tags to our set
        completedTags.forEach(tag => {
          const cleanTag = this.cleanTag(tag);
          if (cleanTag && this.isValidTag(cleanTag)) {
            this.tags.add(cleanTag);
          }
        });

        // Update display
        this.renderTags(currentTag);

        // Update input field to show only current tag being typed
        if (completedTags.length > 0) {
          this.inputElement.value = currentTag;
        }
      }

      cleanTag(tag) {
        // Clean and normalize tag: lowercase, trim, remove special chars except hyphens/underscores
        return tag.trim()
                  .toLowerCase()
                  .replace(/[^a-z0-9\-_]/g, '')
                  .substring(0, 50); // Limit tag length
      }

      isValidTag(tag) {
        // Validate tag: must be at least 2 characters, not empty
        return tag.length >= 2 && tag.length <= 50 && !/^\d+$/.test(tag); // No pure numbers
      }

      renderTags(currentTag = '') {
        // Clear existing bubbles
        this.bubblesContainer.innerHTML = '';

        // Render confirmed tags as bubbles
        Array.from(this.tags).sort().forEach(tag => {
          this.createTagBubble(tag, true);
        });

        // Show current tag being typed as a preview bubble
        if (currentTag && this.isValidTag(this.cleanTag(currentTag))) {
          this.createTagBubble(currentTag, false);
        }
      }

      createTagBubble(tag, isConfirmed) {
        const bubble = document.createElement('span');
        bubble.className = isConfirmed 
          ? 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200'
          : 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-600 border border-gray-300 opacity-75';
        
        bubble.innerHTML = `
          <span>${this.escapeHtml(tag)}</span>
          ${isConfirmed ? `
            <button type="button" class="ml-1 inline-flex items-center justify-center w-4 h-4 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none focus:bg-blue-200 focus:text-blue-600" 
                    onclick="this.closest('.tag-manager').tagManager.removeTag('${this.escapeHtml(tag)}')">
              <svg class="w-2 h-2" fill="currentColor" viewBox="0 0 8 8">
                <path fill-rule="evenodd" d="M2.5 1l4 4-4 4L1 7.5 3.5 5 1 2.5 2.5 1z" clip-rule="evenodd" transform="rotate(45 4 4)" />
              </svg>
            </button>
          ` : ''}
        `;

        // Add reference for removal
        if (isConfirmed) {
          bubble.classList.add('tag-manager');
          bubble.tagManager = this;
        }

        this.bubblesContainer.appendChild(bubble);
      }

      removeTag(tag) {
        this.tags.delete(tag);
        this.renderTags();
      }

      removeLastTag() {
        if (this.tags.size > 0) {
          const tagsArray = Array.from(this.tags);
          const lastTag = tagsArray[tagsArray.length - 1];
          this.removeTag(lastTag);
        }
      }

      finalizeTags() {
        // Process any remaining text in the input
        const remainingText = this.inputElement.value.trim();
        if (remainingText) {
          this.parseAndDisplayTags(remainingText + ' '); // Add space to trigger completion
        }
        this.inputElement.focus(); // Keep focus for continued typing
      }

      getTags() {
        return Array.from(this.tags).sort();
      }

      setTags(tagArray) {
        this.tags.clear();
        tagArray.forEach(tag => {
          const cleanTag = this.cleanTag(tag);
          if (cleanTag && this.isValidTag(cleanTag)) {
            this.tags.add(cleanTag);
          }
        });
        this.renderTags();
      }

      clear() {
        this.tags.clear();
        this.inputElement.value = '';
        this.renderTags();
      }

      escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }
    }

    // Global tag managers
    let satelliteTagManager, clusterTagManager;

    // Setup tag management for both forms
    function setupTagManagement() {
      // Initialize tag managers
      satelliteTagManager = new TagManager('satelliteTags', 'satelliteTagBubbles');
      clusterTagManager = new TagManager('clusterTags', 'clusterTagBubbles');
    }

    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', function() {
      setupTabs();
      setupTargetForm();
      setupSatelliteForm();
      setupGroundStationForm();
      setupTLEFetching();
      setupClusterForm();
      setupTagManagement();
    });
  </script>
</BaseLayout>