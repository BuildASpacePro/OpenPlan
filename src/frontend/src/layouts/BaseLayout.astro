---
export interface Props {
  title: string;
  activePage?: string;
}

const { title, activePage = 'plan' } = Astro.props;

const navigationItems = [
  { name: 'Plan', href: '/', id: 'plan' },
  { name: 'Timeline', href: '/timeline', id: 'timeline' },
  { name: 'Satellites', href: '/satellites', id: 'satellites' },
  { name: 'Ground Stations', href: '/groundstations', id: 'groundstations' },
  { name: 'Targets', href: '/targets', id: 'targets' },
  { name: 'Activities', href: '/activities', id: 'activities' },
  { name: 'Constraints', href: '/constraints', id: 'constraints' },
  { name: 'Adjustments', href: '/adjustments', id: 'adjustments' },
  { name: 'Documentation', href: '/documentation', id: 'documentation' }
];

// Get the current page name for display
const currentPageName = navigationItems.find(item => item.id === activePage)?.name || 'Plan';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Mission Planner - Astro UX Design System" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <script>
      // Prevent flash of unstyled content by setting theme before page renders
      (function() {
        const theme = localStorage.getItem('theme') || 'light';
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        }
      })();
    </script>
  </head>
  <body class="bg-gray-50 dark:bg-slate-900 font-sans transition-colors duration-200">
    <div class="flex flex-col min-h-screen">
      <!-- Top Bar -->
      <header class="bg-astro-dark shadow-lg border-b border-astro-blue">
        <div class="flex items-center px-6 py-4">
          <!-- Mission Planner Title (Left) -->
          <div class="w-64 flex-shrink-0">
            <h1 class="text-xl font-bold text-astro-light">Mission Planner</h1>
          </div>
          
          <!-- Page Name -->
          <div class="flex-1 pl-8">
            <h2 class="text-lg font-semibold text-white">{currentPageName}</h2>
          </div>
          
          <!-- UTC Time Display (Center) -->
          <div class="flex-1 flex justify-center">
            <div class="text-center">
              <div class="text-xs text-gray-400">Current UTC Time</div>
              <div id="utcTime" class="text-sm font-mono text-white"></div>
            </div>
          </div>
          
          <!-- User Menu (Right) -->
          <div class="flex-1 flex justify-end">
            <div class="relative">
              <!-- User Info Display -->
              <div id="userDisplay" class="hidden flex items-center space-x-2 cursor-pointer" onclick="toggleUserMenu()">
                <svg class="w-5 h-5 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span id="topUsername" class="text-sm font-medium text-white"></span>
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              
              <!-- Login Button -->
              <a href="/login" id="topLoginButton" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200">
                Login
              </a>
              
              <!-- User Dropdown Menu -->
              <div id="userDropdown" class="hidden absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-600 z-50">
                <div class="py-1">
                  <div class="px-4 py-2 border-b border-gray-100 dark:border-gray-600">
                    <div class="text-sm font-medium text-gray-900 dark:text-white" id="dropdownUsername"></div>
                    <div class="text-xs text-gray-500 dark:text-gray-400" id="dropdownUserRole"></div>
                  </div>
                  <button id="themeToggleButton" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                    <svg id="lightModeIcon" class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
                    </svg>
                    <svg id="darkModeIcon" class="w-4 h-4 mr-2 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
                    </svg>
                    <span id="themeToggleText">Dark Mode</span>
                  </button>
                  <a href="/admin" id="dropdownAdminButton" class="hidden block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                    Admin Console
                  </a>
                  <button id="dropdownLogoutButton" class="block w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700">
                    Logout
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>
      
      <div class="flex flex-1">
        <!-- Sidebar Navigation -->
        <nav class="w-64 bg-astro-dark text-white shadow-lg">
          <div class="p-6">
            <!-- Navigation Menu -->
            <ul class="space-y-2">
              {navigationItems.map((item) => (
                <li>
                  <a
                    href={item.href}
                    class={`block px-4 py-3 rounded-lg transition-colors duration-200 ${
                      activePage === item.id
                        ? 'bg-astro-light text-astro-dark font-semibold'
                        : 'text-gray-300 hover:bg-astro-blue hover:text-white'
                    }`}
                  >
                    {item.name}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </nav>

        <!-- Main Content Area -->
        <main class="flex-1 p-8 bg-gray-50 dark:bg-slate-800 transition-colors duration-200">
          <div class="max-w-6xl mx-auto">
            <slot />
          </div>
        </main>
      </div>
    </div>
    
    <script>
      // Authentication utilities
      function getAuthData() {
        const user = localStorage.getItem('user');
        const token = localStorage.getItem('token');
        return {
          user: user ? JSON.parse(user) : null,
          token: token
        };
      }
      
      function clearAuthData() {
        localStorage.removeItem('user');
        localStorage.removeItem('token');
      }
      
      function updateUI() {
        const authData = getAuthData();
        const userDisplay = document.getElementById('userDisplay');
        const topUsername = document.getElementById('topUsername');
        const topLoginButton = document.getElementById('topLoginButton');
        const dropdownUsername = document.getElementById('dropdownUsername');
        const dropdownUserRole = document.getElementById('dropdownUserRole');
        const dropdownAdminButton = document.getElementById('dropdownAdminButton');
        
        if (authData.user && authData.token) {
          // User is logged in
          userDisplay.classList.remove('hidden');
          topUsername.textContent = authData.user.username;
          dropdownUsername.textContent = authData.user.username;
          dropdownUserRole.textContent = authData.user.role;
          topLoginButton.classList.add('hidden');
          
          // Show admin button only for admin users
          if (authData.user.role === 'admin') {
            dropdownAdminButton.classList.remove('hidden');
          }
        } else {
          // User is not logged in
          userDisplay.classList.add('hidden');
          topLoginButton.classList.remove('hidden');
          dropdownAdminButton.classList.add('hidden');
        }
      }
      
      // User dropdown menu functions
      window.toggleUserMenu = function() {
        const dropdown = document.getElementById('userDropdown');
        dropdown.classList.toggle('hidden');
      }
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(event) {
        const userDisplay = document.getElementById('userDisplay');
        const dropdown = document.getElementById('userDropdown');
        
        if (!userDisplay.contains(event.target) && !dropdown.contains(event.target)) {
          dropdown.classList.add('hidden');
        }
      });
      
      // Handle logout
      document.getElementById('dropdownLogoutButton').addEventListener('click', () => {
        clearAuthData();
        window.location.href = '/login';
      });
      
      // Theme management functions
      function getTheme() {
        return localStorage.getItem('theme') || 'light';
      }
      
      function setTheme(theme) {
        localStorage.setItem('theme', theme);
        const html = document.documentElement;
        if (theme === 'dark') {
          html.classList.add('dark');
        } else {
          html.classList.remove('dark');
        }
        updateThemeToggleUI();
      }
      
      function toggleTheme() {
        const currentTheme = getTheme();
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
      }
      
      function updateThemeToggleUI() {
        const currentTheme = getTheme();
        const lightIcon = document.getElementById('lightModeIcon');
        const darkIcon = document.getElementById('darkModeIcon');
        const toggleText = document.getElementById('themeToggleText');
        
        if (currentTheme === 'dark') {
          lightIcon.classList.add('hidden');
          darkIcon.classList.remove('hidden');
          toggleText.textContent = 'Light Mode';
        } else {
          lightIcon.classList.remove('hidden');
          darkIcon.classList.add('hidden');
          toggleText.textContent = 'Dark Mode';
        }
      }
      
      // Handle theme toggle
      document.getElementById('themeToggleButton').addEventListener('click', toggleTheme);
      
      // UTC Time display function
      function updateUTCTime() {
        const now = new Date();
        const day = String(now.getUTCDate()).padStart(2, '0');
        const month = String(now.getUTCMonth() + 1).padStart(2, '0');
        const year = now.getUTCFullYear();
        const hours = String(now.getUTCHours()).padStart(2, '0');
        const minutes = String(now.getUTCMinutes()).padStart(2, '0');
        const seconds = String(now.getUTCSeconds()).padStart(2, '0');
        
        const formattedTime = `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
        document.getElementById('utcTime').textContent = formattedTime;
      }
      
      // Initialize UI on page load
      document.addEventListener('DOMContentLoaded', function() {
        updateUI();
        updateUTCTime();
        setTheme(getTheme()); // Initialize theme
        
        // Update UTC time every second
        setInterval(updateUTCTime, 1000);
      });
      
      // Global function to get auth headers for API calls
      window.getAuthHeaders = function() {
        const authData = getAuthData();
        if (authData.token) {
          return {
            'Authorization': `Bearer ${authData.token}`,
            'Content-Type': 'application/json'
          };
        }
        return {
          'Content-Type': 'application/json'
        };
      };
      
      // Global function to check if user is authenticated
      window.isAuthenticated = function() {
        const authData = getAuthData();
        return !!(authData.user && authData.token);
      };
      
      // Global function to check if user has specific role
      window.hasRole = function(role) {
        const authData = getAuthData();
        return authData.user && authData.user.role === role;
      };
    </script>
  </body>
</html>