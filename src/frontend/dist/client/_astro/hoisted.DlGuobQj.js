import"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js";import"./hoisted.ubEzurhk.js";const i="http://localhost:3000";let r,d=[],u=[],g=[],m=!1;const x={red:"#ef4444",green:"#22c55e",blue:"#3b82f6",yellow:"#eab308",orange:"#f97316",purple:"#a855f7",grey:"#6b7280",gray:"#6b7280",black:"#1f2937",white:"#f9fafb",cyan:"#06b6d4",magenta:"#d946ef"};function $(){r=L.map("mapContainer",{center:[20,0],zoom:2,minZoom:1,maxZoom:10,worldCopyJump:!1,maxBounds:[[-90,-180],[90,180]],maxBoundsViscosity:1}),L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"© OpenStreetMap contributors"}).addTo(r)}function w(t){const a=x[t.colour]||"#6b7280",e=L.divIcon({className:"satellite-marker",html:`<div style="background-color: ${a}; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white; box-shadow: 0 0 4px rgba(0,0,0,0.3);"></div>`,iconSize:[12,12],iconAnchor:[6,6]});return L.marker([t.latitude,t.longitude],{icon:e}).bindPopup(`
          <div class="p-2">
            <h4 class="font-bold text-sm">${t.name}</h4>
            <p class="text-xs text-gray-600">Satellite</p>
            <p class="text-xs">Lat: ${t.latitude.toFixed(2)}°</p>
            <p class="text-xs">Lon: ${t.longitude.toFixed(2)}°</p>
            <p class="text-xs">Alt: ${t.altitude.toFixed(0)} km</p>
            <p class="text-xs text-gray-500">${new Date(t.timestamp).toLocaleTimeString()}</p>
          </div>
        `)}function y(t){const a=L.divIcon({className:"ground-station-marker",html:'<div style="background-color: #3b82f6; width: 10px; height: 10px; transform: rotate(45deg); border: 2px solid white; box-shadow: 0 0 4px rgba(0,0,0,0.3);"></div>',iconSize:[10,10],iconAnchor:[5,5]});return L.marker([t.latitude,t.longitude],{icon:a}).bindPopup(`
          <div class="p-2">
            <h4 class="font-bold text-sm">${t.name}</h4>
            <p class="text-xs text-gray-600">Ground Station</p>
            <p class="text-xs">Lat: ${t.latitude.toFixed(2)}°</p>
            <p class="text-xs">Lon: ${t.longitude.toFixed(2)}°</p>
            <p class="text-xs">Alt: ${t.altitude.toFixed(1)} km</p>
          </div>
        `)}function k(){d.forEach(t=>r.removeLayer(t)),u.forEach(t=>r.removeLayer(t)),g.forEach(t=>r.removeLayer(t)),d=[],u=[],g=[]}async function E(t,a){try{const e=await fetch(`${i}/api/satellites/${t}/trajectory`,{headers:window.getAuthHeaders?window.getAuthHeaders():{}});if(!e.ok)return console.warn(`Failed to fetch trajectory for satellite ${t}`),null;const o=await e.json();if(o.trajectory_positions&&o.trajectory_positions.length>0){const l=o.trajectory_positions.map(n=>[n.latitude,n.longitude]),s=L.polyline(l,{color:a,weight:2,opacity:.7,dashArray:"5, 5"});return s.bindPopup(`
            <div class="p-2">
              <h4 class="font-bold text-sm">${o.satellite_name} - Trajectory</h4>
              <p class="text-xs text-gray-600">Next 3 hours path</p>
              <p class="text-xs">Positions: ${o.total_positions}</p>
              <p class="text-xs text-gray-500">From: ${new Date(o.time_range.start).toLocaleTimeString()}</p>
              <p class="text-xs text-gray-500">To: ${new Date(o.time_range.end).toLocaleTimeString()}</p>
            </div>
          `),s}}catch(e){console.error(`Error creating trajectory for satellite ${t}:`,e)}return null}async function h(){if(m)return;m=!0;const t=document.getElementById("refreshLocations");t.textContent="Loading...",t.disabled=!0;try{const a=await fetch(`${i}/api/satellites/positions/current`,{headers:window.getAuthHeaders?window.getAuthHeaders():{}}),e=await fetch(`${i}/api/locations/groundstations`,{headers:window.getAuthHeaders?window.getAuthHeaders():{}});if(!a.ok)throw new Error(`Satellite data error! status: ${a.status}`);if(!e.ok)throw new Error(`Ground station data error! status: ${e.status}`);const o=await a.json(),l=await e.json();k();let s=0;for(const n of o.satellites)if(n.position&&n.position.latitude!==null&&n.position.longitude!==null){const c={satellite_id:n.satellite_id,name:n.name,colour:n.colour,latitude:n.position.latitude,longitude:n.position.longitude,altitude:n.position.altitude_km,timestamp:n.position.timestamp},f=w(c);f.addTo(r),d.push(f);const b=x[n.colour]||"#6b7280",p=await E(n.satellite_id,b);p&&(p.addTo(r),g.push(p)),s++}else console.warn(`No valid position data for satellite: ${n.name}`);l.forEach(n=>{const c=y(n);c.addTo(r),u.push(c)}),document.getElementById("satelliteCount").textContent=s,document.getElementById("groundStationCount").textContent=l.length,document.getElementById("lastUpdate").textContent=new Date(o.timestamp).toLocaleTimeString(),s<o.satellites.length&&console.warn(`${o.satellites.length-s} satellites have no cached position data`)}catch(a){console.error("Failed to load locations:",a),console.log("Attempting fallback to satellite.js calculations...");try{await v()}catch(e){console.error("Fallback method also failed:",e),alert("Failed to load satellite and ground station data. Check console for details.")}}finally{m=!1,t.textContent="Refresh Positions",t.disabled=!1}}async function v(){const t=await fetch(`${i}/api/locations/all`,{headers:window.getAuthHeaders?window.getAuthHeaders():{}});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const a=await t.json();k(),a.satellites.forEach(e=>{if(e.latitude!==null&&e.longitude!==null){const o=w(e);o.addTo(r),d.push(o)}}),a.ground_stations.forEach(e=>{const o=y(e);o.addTo(r),u.push(o)}),document.getElementById("satelliteCount").textContent=a.satellites.length,document.getElementById("groundStationCount").textContent=a.ground_stations.length,document.getElementById("lastUpdate").textContent=new Date(a.timestamp).toLocaleTimeString()+" (fallback)"}async function S(){try{return(await(await fetch(`${i}/api/auth/setup-status`)).json()).setup_required?(window.location.href="/setup",!1):!0}catch(t){return console.error("Error checking setup status:",t),!0}}document.addEventListener("DOMContentLoaded",async function(){await S()&&($(),h(),document.getElementById("refreshLocations").addEventListener("click",h),document.getElementById("toggle2D3D").addEventListener("click",function(){alert("3D view would require Cesium.js integration. Currently showing 2D map.")}),setInterval(h,6e4))});
