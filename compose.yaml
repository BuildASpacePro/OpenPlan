services:
  backend:
    image: postgres:16
    container_name: mission-backend
    restart: always
    environment:
      POSTGRES_DB: missionplanning
      POSTGRES_USER: missionuser
      POSTGRES_PASSWORD: missionpass
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./src/backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mission-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U missionuser -d missionplanning"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build: ./src/api
    container_name: mission-api
    restart: always
    environment:
      POSTGRES_HOST: backend
      POSTGRES_DB: missionplanning
      POSTGRES_USER: missionuser
      POSTGRES_PASSWORD: missionpass
      POSTGRES_PORT: 5432
    ports:
      - "3000:3000"
    volumes:
      - ./src/api:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mission-network

  frontend:
    build: ./src/frontend
    container_name: mission-frontend
    ports:
      - "4321:4321"
    environment:
      - ENV=development
      - BACKEND_URL=http://api:3000
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    depends_on:
      - api
      - backend
    networks:
      - mission-network

  redis:
    build: ./src/redis
    container_name: mission-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mission-network

volumes:
  db_data:
  redis_data:

networks:
  mission-network:
    driver: bridge