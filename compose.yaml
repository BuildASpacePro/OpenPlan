services:
  backend:
    image: postgres:16
    container_name: mission-backend
    restart: "no"
    environment:
      POSTGRES_DB: missionplanning
      POSTGRES_USER: missionuser
      POSTGRES_PASSWORD: missionpass
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./src/backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mission-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U missionuser -d missionplanning"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  api:
    build: 
      context: ./src/api
      target: dev
    container_name: mission-api
    restart: "no"
    environment:
      POSTGRES_HOST: backend
      POSTGRES_DB: missionplanning
      POSTGRES_USER: missionuser
      POSTGRES_PASSWORD: missionpass
      POSTGRES_PORT: 5432
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: mission-token-12345
      INFLUXDB_ORG: missionplanning
      INFLUXDB_BUCKET: accesswindows
    ports:
      - "3000:3000"
    volumes:
      - ./src/api:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - mission-network

  frontend:
    build: 
      context: ./src/frontend
      target: dev
    container_name: mission-frontend
    ports:
      - "4321:4321"
    environment:
      - ENV=development
      - BACKEND_URL=http://api:3000
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    depends_on:
      api:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - mission-network

  redis:
    build: ./src/redis
    container_name: mission-redis
    restart: "no"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mission-network

  influxdb:
    image: influxdb:2.7
    container_name: mission-influxdb
    restart: "no"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: mission123
      DOCKER_INFLUXDB_INIT_ORG: missionplanning
      DOCKER_INFLUXDB_INIT_BUCKET: accesswindows
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: mission-token-12345
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - mission-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s


volumes:
  db_data:
  redis_data:
  influxdb_data:
  influxdb_config:

networks:
  mission-network:
    driver: bridge